{"version":3,"sources":["components/MovieCard.js","services/movieData.js","services/movieAPI.js","components/Loading.js","pages/MovieList.js","components/MovieForm.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","this","props","movieId","id","data-testid","className","title","storyline","to","React","Component","movies","subtitle","rating","imagePath","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","find","mov","parseInt","Promise","resolve","Loading","MovieList","requestMovie","bind","state","loading","a","setState","map","key","MovieForm","handleSubmit","onSubmit","field","newValue","htmlFor","placeholder","type","value","onChange","event","updateMovie","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","MovieDetails","deleteMovie","match","params","movieAPI","fetchMovie","filter","status","alt","src","NewMovie","redirect","newMovie","movieData","nextId","length","EditMovie","shouldRedirect","updatedMovie","requesMovie","NotFound","App","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c81b09cb.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const movieId = `/movies/${movie.id}`;\n    return (\n      <div data-testid=\"movie-card\" className=\"container-card\">\n        <h2>Movie Card</h2>\n        <p>{ movie.title }</p>\n        <p>{ movie.storyline }</p>\n        <Link to={ movieId } className=\"route-link\">VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: propTypes.objectOf(\n    propTypes.string,\n    propTypes.bool,\n    propTypes.number,\n  ).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport * as movieAPI from '../services/movieAPI';\nimport Loading from '../components/Loading';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.requestMovie = this.requestMovie.bind(this);\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.requestMovie();\n  }\n\n  async requestMovie() {\n    const movies = await movieAPI.getMovies();\n    this.setState({\n      movies: [...movies],\n      loading: false,\n    });\n\n    /* tentativa com fetch(falha)\n    fetch(movieAPI.getMovies())\n      .then((list) => this.setState({ movies: [...list], loading: false })); */\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n    // Render Loading here if the request is still happening\n    return (\n      <div data-testid=\"movie-list\" className=\"container-pages\">\n\n        {loading ? <Loading className=\"loading\" />\n          : movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n\n        <br />\n        <Link to=\"/movies/new\" className=\"route-link\">ADICIONAR CARTÃO</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n          Título\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n          Subtítulo\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n          Imagem\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n          Sinopse\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n          Avaliação\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"form-movie\">\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n        <br />\n        <Link to=\"/\" className=\"route-link\"> Voltar Inicio</Link>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.objectOf(\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.bool,\n  ).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.requestMovie = this.requestMovie.bind(this);\n    this.deleteMovie = this.deleteMovie.bind(this);\n\n    this.state = {\n      movie: {},\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.requestMovie();\n  }\n\n  async requestMovie() {\n    const { match } = this.props;\n    const { params } = match;\n    const { id } = params;\n    const fetchMovie = await movieAPI.getMovie(id);\n    this.setState({\n      movie: fetchMovie,\n      loading: false,\n    });\n  }\n\n  deleteMovie() {\n    const { match } = this.props;\n    const { params } = match;\n    const { id } = params;\n    movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    // Change the condition to check the state\n    // if (true) return <Loading />;\n    const { loading, movie } = this.state;\n    const { title, storyline, imagePath, genre, rating, subtitle } = movie;\n    const { match } = this.props;\n    const { params } = match;\n    const { id } = params;\n    const movieId = `/movies/${id}/edit`;\n\n    return (\n      <div data-testid=\"movie-details\" className=\"container-pages\">\n\n        {\n          loading ? <Loading className=\"loading\" />\n            : (\n              <div>\n                <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n                <p>{ `Title: ${title}` }</p>\n                <p>{ `Subtitle: ${subtitle}` }</p>\n                <p>{ `Storyline: ${storyline}` }</p>\n                <p>{ `Genre: ${genre}` }</p>\n                <p>{ `Rating: ${rating}` }</p>\n                <Link to=\"/\" className=\"route-link\">VOLTAR</Link>\n                <Link to={ movieId } className=\"route-link\">EDITAR</Link>\n                <Link\n                  to=\"/\"\n                  onClick={ this.deleteMovie }\n                  className=\"route-link\"\n                >\n                  DELETAR\n                </Link>\n              </div>)\n        }\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: propTypes.objectOf(\n    propTypes.number,\n    propTypes.string,\n  ).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n    this.setState({\n      redirect: true,\n    });\n  }\n\n  render() {\n    const { redirect } = this.state;\n\n    if (redirect) return <Redirect to=\"/\" />;\n\n    return (\n      <div data-testid=\"new-movie\" className=\"container-pages\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: true,\n      shouldRedirect: false,\n      movie: {},\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.requestMovie = this.requestMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.requestMovie();\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie);\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  async requestMovie() {\n    const { match } = this.props;\n    const { params } = match;\n    const { id } = params;\n    const requesMovie = await movieAPI.getMovie(id);\n    this.setState({\n      movie: requesMovie,\n      status: false,\n    });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      // Redirect\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\" className=\"container-pages\">\n\n        {\n          status ? <Loading />\n            : <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n        }\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: propTypes.objectOf(\n    propTypes.string,\n    propTypes.number,\n    propTypes.bool,\n  ).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n      <BrowserRouter>\n        <div>Movie Card Library CRUD</div>\n        <Switch>\n          <Route exact path=\"/movies/new\" component={ NewMovie } />\n          <Route exact path=\"/movies/:id\" component={ MovieDetails } />\n          <Route\n            exact\n            path=\"/movies/:id/edit\"\n            render={ (props) => <EditMovie { ...props } /> }\n          />\n          <Route exact path=\"/\" component={ MovieList } />\n          <Route exact path=\"*\" component={ NotFound } />\n        </Switch>\n      </BrowserRouter>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}